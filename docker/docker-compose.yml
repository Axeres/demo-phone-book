version: "3.2"

services:
  app:
    build: ./docker
    container_name: ${PREFIX_NAME}_app
    restart: always
    working_dir: ${APP_PATH_CONTEINER_API}
    volumes:
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/php.ini
      - ./docker/php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ${APP_PATH_HOST_API}:${APP_PATH_CONTEINER_API}
    networks:
      - network

  nginx:
    image: nginx:alpine
    container_name: ${PREFIX_NAME}_nginx
    volumes:
      - ./docker/nginx:/etc/nginx/conf.d
      - ./nginxLogs:/var/log/nginx
      - ${APP_PATH_HOST_API}:${APP_PATH_CONTEINER_API}
      - ${APP_PATH_HOST_WEB}:${APP_PATH_CONTEINER_WEB}
    ports:
      - ${APP_PORT}:80
    restart: always
    working_dir: ${APP_PATH_CONTEINER_API}
    depends_on:
      - app
      - db
    networks:
      - network

  db:
    image: postgres:11.5-alpine
    container_name: ${PREFIX_NAME}_postgres_11.5
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - ${DB_POSTGRES_PORT}:5432
    volumes:
      - ./dbPostgres:/var/lib/postgresql/data
    networks:
      - network

  adminer:
    image: adminer
    container_name: ${PREFIX_NAME}_adminer
    restart: always
    ports:
      - ${ADMINER_PORT}:8080
    networks:
      - network

  composer:
    image: composer
    volumes:
      - ${APP_PATH_HOST_API}:${APP_PATH_CONTEINER_API}
    working_dir: ${APP_PATH_CONTEINER_API}
    command: composer install

  node:
    image: node:alpine
    volumes:
      - ${APP_PATH_HOST_API}:${APP_PATH_CONTEINER_API}
      - ${APP_PATH_HOST_WEB}:${APP_PATH_CONTEINER_WEB}
    working_dir: ${APP_PATH_CONTEINER_API}
    command: npm install

networks:
  network:
    driver: bridge

